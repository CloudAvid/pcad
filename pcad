#!/bin/bash

# PDNSoft Co. VirtaulMachines Manager in Cluster
# 
# This Manager Placed On "pvmctl" program ...
# just add Cluster Awareness to him ...
#
# 1388-12-12: by hamid jafarian
#	* start

. /etc/pvm.conf
. "$funcdir/cluster"

# Progarm Informations 
scriptname="pcad"
scriptversion="2.7.0"

# Cluster Configuration Version .. 
# Will be retrived from Cluster Configuration File
clusconf_ver=""
# Configuration Versions been used for update
# == ++ clusconf_ver
new_clusconf_ver=""

check_run()
{
	echo_info "Verify $1 State, Please Wait ... "

	$clustat -s "$1" >/dev/null 2>&1
	if [[ $? -eq 0 ]]; then
		# $clustat -s "$1"
		return 1
	fi
	return 0
}

do_start()
{
	if [[ -z $1 ]]; then
		echo_usage "start host_name [server]"
		return 1
	fi

	check_run "$1"
	if [[ $? -eq 1 ]]; then
		echo_error "$1 is run ..."
		return 1
	fi

	if [[ ! -z $2 ]]; then
		echo_info "Starting $1 on $2:"
		$clusvcadm -e "$1" -m "$2"
	else
		$clusvcadm -e "$1"
	fi
	return $?
}

do_stop()
{
	if [[ -z $1 ]]; then
		echo_usage "stop host_name"
		return 1
	fi

	$clusvcadm -d "$1"
	return $?
}

do_restart()
{
	if [[ -z $1 ]]; then
		echo_usage "restart host_name [server]"
		return 1
	fi

        check_run "$1"
	if [[ $? -eq 0 ]]; then
		echo_result "$1 is stop right now !!"
		return 1
	fi

	if [[ -z "$2" ]]; then
		$clusvcadm -R "$1"
	else
		$clusvcadm -r "$1" -m "$2"
	fi
	return $?
	
}

do_new()
{
	$pvmctl "new" "$1" "$2" 
	if [[ $? -ne 0 ]]; then
		return $?
	fi

	clus_service_add "$1"
	return $?
}

do_create()
{
	$pvmctl "create" "$1" "$2" "$3"
	if [[ $? -ne 0 ]]; then
		return $?
	fi

	clus_service_add "$2"
	return $?
}

do_edit()
{
	$pvmctl "edit" "$1"
	if [[ $? -ne 0 ]]; then
		return $?
	fi

	clus_service_add "$1"
	return $?
}

do_rmvm()
{
	if [[ -z $1 ]]; then
		echo_usage "rmvm host_name"
		return 1
	fi
	check_run $1
	if [[ $? -eq 1 ]]; then
		echo_error "$1 is run... Shutting down him before any work ..."
		return 1
	fi

	$pvmctl "rmvm" "$1"
	if [[ ! $? -eq 0 ]]; then
		return 1
	fi
	$rm "$srvdir/$1"

	clus_service_del "$1"
	return $?
}

do_rmimg()
{
	if [[ -z $1 ||  -z $2 ]]; then
		# print out usage
		$pvmctl rmimg
		return 1
	fi
	check_run $1
	if [[ $? -eq 1 ]]; then
		echo_error "$1 is run... Shutting down him before any work ..."
		return 1
	fi

	$pvmctl "rmimg" "$1" "$2"
	return "$?"
}

do_rnimg()
{
	if [[ -z "$1" ||  -z "$2" || -z "$3" ]]; then
		# print out usage
		$pvmctl rnimg
		return 1
	fi
	check_run $1
	if [[ $? -eq 1 ]]; then
		echo_error "$1 is run... Shutting down him before any work ..."
		return 1
	fi

	$pvmctl "rnimg" "$1" "$2" "$3"
	return "$?"
}

do_mvvm()
{
	if [[ -z $1 ||  -z $2 ]]; then
		# print out usage
		$pvmctl mvvm
		return 1
	fi
	check_run $1
	if [[ $? -eq 1 ]]; then
		echo_error "$1 is run... Shutting down him before any work ..."
		return 1
	fi

	$pvmctl "mvvm" "$1" "$2"
	return "$?"
}

do_rename()
{
	if [[ -z "$1" || -z "$2" ]]; then
		echo_usage "rename host_name new_name"
		return 1
	fi
	
	check_run $1
	if [[ $? -eq 1 ]]; then
		echo_error "$1 is run... Shutting down him before any work ..."
		return 1
	fi

	$pvmctl "rename" "$1" "$2"
	if [[ ! $? -eq 0 ]]; then
		return 1
	fi

	echo_info "Generating service file ..."
	$sed -e "s/MY_NAME/$2/g" "$srvdir/vm-service-ORIG" > "$srvdir/$2" 
	$rm "$srvdir/$1"
	chmod +x "$srvdir/$2"

	clus_service_ren "$1" "$2"
	return $?
}

do_clone()
{
	if [[ -z $1 || -z $2 ]]; then
		echo_usage "clone host clone_name [new_sid]";
		return 1;
	fi	

	check_run "$1"
	if [[ $? -eq 1 ]]; then
		echo_info "$1 is run ..."
		are_you_sure "Cloning from running machine:"
		if [[ "$?" -eq 0 ]]; then
			echo_result "Cloning canceled ..."
			return 0
		fi
	fi

	echo "y" | "$pvmctl" "clone"	"$1" "$2" "$3" 
	if [[ ! $? -eq 0 ]]; then
                return $?
        fi
	
	clus_service_add "$2"
	return $?
}

do_mktmpl()
{
	if [[ -z "$1" ]]; then
		# print out usage string
		$pvmctl "mktmpl"
		exit 1
	fi

	check_run "$1"
	if [[ $? -eq "1" ]]; then
		echo_error "$1 is run... Shutdown him before any work ..."
		return 1
	fi

	$pvmctl "mktmpl" "$1" "$2" > /dev/null
	return $?
}

do_show_log()
{
	log_file=$(read_config_file "$basedir/etc/vm-services-log-file")
	if [[ $(expr ${log_file} : '/') -eq 0 ]]; then
		log_file="$logdir/$log_file"
	fi

	if [[ -f "$log_file" ]]; then
		if [[ ! -z "$1" ]]; then 
			$tail -n$1 "$log_file"
		else
			$tail -f "$log_file"
		fi
	fi
}

do_show_uptime()
{
	uptime | $awk '{print $3" "$4}'
}

do_info()
{
	vms_ids=`$pvmctl "ls" "with-ids" | $sed -e "/host/,/----/d"`
	vms_states=`$clustat | $sed -e "/Cluster Status/,/------ ----/d" | \
			$sed -e "1,/------ ----/d" -e "s/service://" -e "s/\.yazd//" | \
			$awk '{ printf "%-20s %-20s %-20s\n" ,$1,$2,$3 }'`
	echo $vms_states | sed -n -e "/new-lin/,+3p"
	echo -e $vms_ids | grep new-lin
}

do_ver()
{
	echo_result "$scriptversion"
}

do_help()
{
	${cat} <<-end-of-help
	${scriptname} ${scriptversion}
	PDNSoft Co. Cluster Administrator Utility
	Licensed GPL v3
	Copyright 2010

	${scriptname} is a management and control script for KVM-based virtual machines in the cluster.

	Usage:  ${scriptname} start    host [server]   - start the named VM on local machine or on the named server if given
	        ${scriptname} stop     host            - stop  the named VM
	        ${scriptname} restart  host [server]   - restart named "VM", it will be restarted on the named server if given

	        ${scriptname} status                   - show the status of the cluster
	        ${scriptname} status   host            - show full details for the named VM in the cluster

	        ${scriptname} show-log #n              - show the cluster activity log (use CTRL+^C to exit)

	        ${scriptname} uptime                   - show uptime server

	        ${scriptname} mkimg    host image_name image_size  - create a disk image in the host directory
	        ${scriptname} rmimg    host image_name             - remove disk image of the host
	        ${scriptname} rnimg    host image_name new_name    - rename disk image of the host

	        ${scriptname} new      host_name [sid]             - Create A virtual machine
	        ${scriptname} create   template host_name [sid]    - Create A virtual machine from template
	        ${scriptname} clone    host clone_name [new_sid]   - creating a clone from the host

	        ${scriptname} rmvm     host                        - delete virtual machine
	        ${scriptname} rename   host new_name               - rename host to new_name
	        ${scriptname} mvvm     host new_sid                - move virtual machine to new storage

	        ${scriptname} edit     host                        - Open config file for edit
	        ${scriptname} info     host                        - print out host information (parameters in config file)

	        ${scriptname} mktmpl   host  [template_name]       - Create A virtual Template from host
	        ${scriptname} rmtmpl   template_name               - Remove the Virtual Template 
	        ${scriptname} mkiso    iso_name                    - Create An ISO image from the CD in Local CDROM(local)
	        ${scriptname} rmiso    iso_name                    - Remove the ISO image

	        ${scriptname} ls                                   - print out list of virtual machines
	        ${scriptname} lst                                  - print out list of Virtual Templates 
	        ${scriptname} lscd                                 - print out list of CD Images (ISO files)
	        ${scriptname} lsid                                 - print out list of Virtual Storages.

	        ${scriptname} help                                 - show this usage

	end-of-help
}

# Main script
case "${1}" in
	"start")
		do_start "$2" "$3"
		exit $?
		;;
	"stop")
		do_stop "$2"
		exit $?
		;;
	"restart")
		do_restart "$2" "$3"
		exit $?
		;;
	"status")
		if [[ ! -z $2 ]]; then
			$clustat "status" -s "$2"
		else
			$clustat "status"
		fi
		;;
	"mkimg")
		$pvmctl "mkimg" "$2" "$3" "$4"
		;;
	"rmimg")
		do_rmimg "$2" "$3"
		exit $?
		;;
	"rnimg")
		do_rnimg "$2" "$3" "$4"
		exit $?
		;;
	"ls")
		$pvmctl "ls" "$2"
		#do_info
		;;
	"lst")
		$pvmctl "lst"
		;;
	"lscd")
		$pvmctl "lscd"
		;;
	"lsid")
		$pvmctl "lsid"
		;;
	"rmvm")
		do_rmvm "$2"
		exit $?
		;;
	"mvvm")
		do_mvvm "$2" "$3"
		exit $?
		;;
	"rename")
		do_rename "$2" "$3"
		exit $?
		;;
	"info")
		check_run "$2"
		echo ""
		echo "Config Parameters:"
		$pvmctl "info" "$2"
		;;
	"binfo")
		check_run "$2"
		echo ""
		echo "Config Parameters:"
		$pvmctl "binfo" "$2"
		;;
	"edit")
		do_edit "$2"
		exit $?
		;;
	"create")
		do_create "$2" "$3" "$4"
		exit $?
		;;
	"new")
		do_new "$2" "$3"
		exit $?
		;;
	"clone")
		do_clone "$2" "$3" "$4"
		exit $?
		;;
	"mktmpl")
		do_mktmpl "$2" "$3"
		;;
	"mkbase")
		do_mktmpl "$2" "$3"
		;;
	"rmtmpl")
		$pvmctl "rmtmpl" "$2"
		;;
	"rmbase")
		$pvmctl "rmtmpl" "$2"
		;;
	"mkiso")
		$pvmctl "mkiso" "$2"
		;;
	"rmiso")
		$pvmctl "rmiso" "$2"
		;;
	"show-log")
		do_show_log "$2"
		;;
	"uptime")
		do_show_uptime
		;;
	"help")
		do_help
		;;
	"ver")
		do_ver
		;;
	*)
		echo_error "bad command, use \"pcad help\" for more detail."
		;;
esac

exit 0
